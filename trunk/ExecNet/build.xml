<project name="ExecNet" default="main" basedir=".">
	<property name="proj.name" value="ExecNet"/>
	<property name="proj.version" value="1.0"/>
	<property name="src.dir" value="src"/>
	<property name="test.dir" value="test"/>
	<property name="webcontent.dir" value="WebContent"/>
	<property name="lib.dir" value="WebContent/WEB-INF/lib"/>
	<property name="build.dir" value="build"/>
	<property name="deploy.dir" value="deploy"/>
	
	<!--<property name="tomcat.dir" value="D:\\02Verwaltung\\privat\\FH\\2011\\SWD2011\\Tools\\Tomcat 7.0\\"/>-->
	<property name="tomcat.dir" value="C:\\Progs\\apache-tomcat-7.0.26\\"/>
	<property name="report.dir" value="reports"/>
	<property name="unittests.dir" value="unittests"/>
	
	<property file="findbugs.properties"/>
	<!-- <fail unless="findbugs.properties" message="findbugs.properties file not found!"/>	-->
	<property name="findbugs.home" value="vendor/findbugs-1.3.8" />
	<property name="findbugs.lib" location="${findbugs.home}/lib" />
	<property name="findbugs.aux.lib" location="${findbugs.home}/auxiliary" />
	
	<!-- eventuell auch fuer Cobertura ein Properties-File verwenden, wie in vendor\cobertura-1.9.4.1\examples\basic -->	
	<property name="lib.cobertura" location="vendor/cobertura-1.9.4.1"/>
	<property name="lib.junit" location="vendor/junit-4.5/lib"/>
	<property name="build" location="build-ant"/>
	<property name="build-instrumented" location="build-instrumented"/>
	<property name="doc" location="reports"/>
	
	<property name="svn.execnet.databases" value="https://fhj-ws2012-swd10-ssd.googlecode.com/svn/trunk/ExecNet/databases"/>
	<property name="svn.execnet.log4j" value="https://fhj-ws2012-swd10-ssd.googlecode.com/svn/trunk/ExecNet/log4j"/>
	<property name="svn.execnet.src" value="https://fhj-ws2012-swd10-ssd.googlecode.com/svn/trunk/ExecNet/src"/>
	<property name="svn.execnet.test" value="https://fhj-ws2012-swd10-ssd.googlecode.com/svn/trunk/ExecNet/test"/>
	<property name="svn.execnet.WebContent" value="https://fhj-ws2012-swd10-ssd.googlecode.com/svn/trunk/ExecNet/WebContent"/>
	<property name="svn.repository" value="${basedir}"/>
	<property name="svn.anttask.lib" location="vendor/svnant-1.3.0/lib"/>

	<path id="project.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
	</path>
	
	<path id="lib.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
	</path>
	
	<path id="findbugs.classpath">
        <fileset dir="${findbugs.lib}">
            <include name="*.jar"/>
        </fileset>
		<fileset dir="${findbugs.aux.lib}">
			<include name="*.jar"/>
		</fileset>
		<path refid="lib.classpath"/>
	</path>
	
	<path id="junit.classpath">
    	<fileset dir="${lib.junit}">
    		<include name="**/*.jar"/>
   	    </fileset>
		<path refid="lib.classpath"/>
			
    </path>	
	
    <path id="cobertura.classpath">
    	<fileset dir="${lib.cobertura}">
    		<include name="**/*.jar"/>
   	    </fileset>
    </path>
	
	<path id="svnant.classpath">
		<fileset dir="${svn.anttask.lib}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant.classpath" />

	<path id="test.classpath">
    	<path refid="cobertura.classpath"/>
    	<path refid="junit.classpath"/>
		<path refid="project.classpath"/>
    	<pathelement path="${build-instrumented}" />
    	<pathelement path="${build}" />
    </path>

	<patternset id="properties.files">
		<include name="**/*.properties"/>
	</patternset>
	
	<taskdef name="findbugs" 
		classname="edu.umd.cs.findbugs.anttask.FindBugsTask" 
		classpathref="findbugs.classpath"/>
	
	<target name="main">
		<echo message="No default target!"/>
		<echo message="Please specify a target: clean, compile, pack2war, deploy, unittests, findbugs, coverage, cruisecontrol"/>
	</target>
	
	<target name="clean" description="Build- und Deploy-Verzeichnis mit den alten Dateien loeschen">
		<delete dir="${build.dir}"/>
		<delete dir="${deploy.dir}"/>
		<delete dir="${unittests.dir}"/>
		<delete file="${findbugs.output.file}" failonerror="false"/>
	</target>
	
	<target name="compile" depends="clean" description="Java-Dateien kompilieren">
		<mkdir dir="${build.dir}"/>
		<javac
			srcdir="${src.dir}"
			destdir="${build.dir}"
			includes="**/*.java"
			nowarn="on"
			includeantruntime="false">
			<classpath refid="project.classpath"/>
		</javac>
		<copy todir="${build.dir}">
			<fileset dir="${src.dir}">
				<patternset refid="properties.files"/>
			</fileset>
		</copy>
	</target>
	
	<target name="pack2war" depends="compile" description="Das war-File generieren">
		<echo message="war-File erstellen" />
		<mkdir dir="${deploy.dir}"/>
		<war 
			destfile="${deploy.dir}/${proj.name}.war"
			webxml="${webcontent.dir}/WEB-INF/web.xml">
			<classes dir="${build.dir}"/>
			<fileset dir="${webcontent.dir}">
				    <exclude name="**/web.xml"/>
			</fileset>
		</war>
	</target>
	
	<target name="deploy" depends="pack2war" description="war-File in das entsprechende Verzeichnis vom Tomcat kopieren">
		<copy file="${deploy.dir}/${proj.name}.war" todir="${tomcat.dir}webapps" overwrite="true" />
	</target>
	
	<target name="checkout" depends="clean" description="alle Tests durchfuehren">
		<echo message="Checkout der Sources von Google-Code durchfuehren" />
		<svn javahl="false" >
			<checkout url="${svn.execnet.databases}" destPath="${svn.repository}/databases" />
    	</svn>
		<svn javahl="false" >
			<checkout url="${svn.execnet.log4j}" destPath="${svn.repository}/log4j" />
		</svn>
		<svn javahl="false" >
			<checkout url="${svn.execnet.src}" destPath="${svn.repository}/src" />
		</svn>
		<svn javahl="false" >
			<checkout url="${svn.execnet.test}" destPath="${svn.repository}/test" />
		</svn>
		<svn javahl="false" >
			<checkout url="${svn.execnet.WebContent}" destPath="${svn.repository}/WebContent" />
		</svn>
	</target>
	
	<target name="unittests" depends="compile">
		<echo message="Unittests durchfuehren" />
		<mkdir dir="${unittests.dir}"/>
		<mkdir dir="${unittests.dir}/test-classes"/>
        <mkdir dir="${unittests.dir}/test-results"/>
        <javac srcdir="test" destdir="${unittests.dir}/test-classes">
            <classpath>
                <pathelement location="${build.dir}"/>
                <path refid="junit.classpath"/>
            </classpath>
        </javac>
		<copy todir="${unittests.dir}/test-classes">
		    <fileset dir="test">
		    	<exclude name="**/*.java"/>
		    	</fileset>
		</copy>
        <junit haltonfailure="no" printsummary="on" fork = "yes">
            <classpath >
                <pathelement location="${build.dir}"/>
                <path refid="junit.classpath"/>
            	<pathelement location="${unittests.dir}/test-classes"/>
            	<!-- CKR: following line needed for finding persistence.xml -->
            	<pathelement location="WebContent/WEB-INF/classes/" />
            </classpath>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml" />
            <batchtest todir="${unittests.dir}/test-results" filtertrace ="on" >
                <fileset dir="${unittests.dir}/test-classes" includes="**/*Test.class"/>
            </batchtest>
        </junit>
    </target>
	
	<target name="findbugs" depends="compile" description="FindBugs ausfuehren">
		<echo message="FindBugs ausfuehren" />
		<findbugs 
			home="${findbugs.home}" 
			output="${findbugs.output.format}" 
			outputFile="${findbugs.output.file}" >
			<!--
			Note: auxiliary classpaths can be added here if needed by analysed libraries.
			<auxClasspath path="${basedir}/lib/Regex.jar" />
			-->
			<auxClasspath refid="findbugs.classpath" />
			<sourcePath path="${src.dir}"/>
			<sourcePath path="${test.dir}"/>
			<class location="${build.dir}"/>
		</findbugs>
	</target>
	
	<target name="coverageinit">
        <mkdir dir="${build-instrumented}"/>
    	<mkdir dir="${build}"/>
    	<mkdir dir="${doc}"/>
    </target>

    <target name="coverageclean">
    	<delete dir="${build}" failonerror="false"/>
        <delete dir="${build-instrumented}" failonerror="false"/>
    	<delete dir="${doc}" failonerror="false"/>
    	<delete file="cobertura.ser" failonerror="false"/>
    </target>

  	<target name="coveragecompile" depends="coverageinit">
  		<!-- Note: cobertura does not work with Java 7 set runtime to 1.6 - no new version since 2010! -->
      	<javac srcdir="${src.dir}:${test.dir}" destdir="${build}" debug="true" includeantruntime="false" target = "1.6" source = "1.6">
          	<classpath refid="test.classpath" />  
      	</javac>
  	</target>	
	<target name="coveragetest.init" depends="coveragecompile">
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

		<cobertura-instrument todir="${build-instrumented}" >
			<fileset dir="${build}">
				<include name="**/*.class"/>
				<exclude name="**/*Test.class"/>
			</fileset>
		</cobertura-instrument>
	</target>
	
	<target name="coveragetest" depends="coverageclean,coveragetest.init">
		<echo message="Coverage-Test durchfuehren" />
		<junit fork="yes" haltonfailure="no" printsummary="on">
			<!-- Needed for cruisecontrol. Refer to:
			    http://stackoverflow.com/questions/3966627/cobertura-with-ant-script-xml-html-coverage-report-always-show-0-coverage-eve
			 -->
			<jvmarg value= "-Dnet.sourceforge.cobertura.datafile=${basedir}/cobertura.ser"/>
			<classpath> 
				<path refid="test.classpath" /> 
        		<pathelement location="WebContent/WEB-INF/classes/" />
				</classpath>
			<formatter type="brief" usefile="false" />
		<!--	<test name="at.fhj.swd.controller.EmailTest" /> -->
			<batchtest filtertrace ="on">
				<fileset dir="${test.dir}" >
					<include name="**/*Test*.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="coverage" depends="coveragetest">
		<cobertura-report format="html" destdir="${doc}" >
		    <fileset dir="${src.dir}">
		        <include name="**/*.java" />
		    </fileset>
		</cobertura-report>
	</target>
	
	<target name="cruisecontrol" depends="checkout,pack2war,unittests,findbugs,coverage" description="kompilieren für CruiseControl">
		<echo message="CruiseControl - Ant erledigt" />
	</target>
	
</project>